// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Data;

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<long>("UserId");

                    b.Property<string>("ProviderDisplayName");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<long>("UserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("LoginProvider", "UserId");

                    b.HasAlternateKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("WebApi.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acitvity");

                    b.Property<DateTime>("AddedOn");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("WebApi.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine");

                    b.Property<int?>("CityId");

                    b.Property<string>("ContactName");

                    b.Property<int>("CountryId");

                    b.Property<string>("Phone");

                    b.Property<string>("ZipCode");

                    b.HasKey("id");

                    b.HasIndex("CityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WebApi.Models.AssesmentCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AddedBy");

                    b.Property<int>("AssessmentId");

                    b.Property<long?>("EvaluatedBy");

                    b.Property<string>("Notes");

                    b.Property<int>("QuestionId");

                    b.Property<int>("Rating");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UploadedOn");

                    b.Property<string>("Videofile");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssesmentCandidate");
                });

            modelBuilder.Entity("WebApi.Models.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentStatusId");

                    b.Property<int?>("Batch");

                    b.Property<int?>("CalendarId");

                    b.Property<int>("CandidateId");

                    b.Property<int>("JobOrderId");

                    b.Property<int?>("OnBoardingId");

                    b.Property<int?>("OrderById");

                    b.Property<string>("ResumePath");

                    b.Property<int?>("TotalRating");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobOrderId");

                    b.HasIndex("OnBoardingId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("WebApi.Models.AssessmentDocument", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentId");

                    b.Property<string>("FilePath");

                    b.Property<int>("UploadedBy");

                    b.Property<DateTime>("UploadedOn");

                    b.HasKey("id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentDocument");
                });

            modelBuilder.Entity("WebApi.Models.AssessmentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<int>("AssessmentId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentForm");
                });

            modelBuilder.Entity("WebApi.Models.AssessmentOnBoarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddedById");

                    b.Property<DateTime?>("AddedOn");

                    b.Property<string>("FilePath");

                    b.Property<DateTime?>("JoiningDate");

                    b.Property<string>("Message");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.ToTable("AssessmentOnBoarding");
                });

            modelBuilder.Entity("WebApi.Models.AssessmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AssessmentStatus");
                });

            modelBuilder.Entity("WebApi.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedOn");

                    b.Property<bool?>("InviteSent");

                    b.Property<long?>("SentBy");

                    b.Property<DateTime?>("SentOn");

                    b.HasKey("Id");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("WebApi.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AddedBy");

                    b.Property<int?>("Addressid");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("Created");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Education");

                    b.Property<string>("Email");

                    b.Property<string>("Experience");

                    b.Property<string>("LinkedIn");

                    b.Property<string>("Name");

                    b.Property<string>("Position");

                    b.Property<int?>("Rating");

                    b.Property<string>("Skills");

                    b.Property<string>("Twitter");

                    b.Property<DateTime?>("Updated");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Addressid");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("WebApi.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("County");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("WebApi.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Name");

                    b.Property<Guid?>("UID");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("WebApi.Models.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("WebApi.Models.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentName");

                    b.HasKey("Id");

                    b.ToTable("DocumentTemplate");
                });

            modelBuilder.Entity("WebApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarId");

                    b.Property<int?>("Companyid");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int?>("EventType");

                    b.Property<string>("Location");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("Status");

                    b.Property<string>("Title");

                    b.Property<string>("UID");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("Companyid");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("WebApi.Models.EventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<bool>("IsOrganizer");

                    b.Property<long>("ParticipantId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("WebApi.Models.FormTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("IsActive");

                    b.Property<string>("Question");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("FormTemplate");
                });

            modelBuilder.Entity("WebApi.Models.InviteCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<int>("JoborderId");

                    b.Property<DateTime?>("SentOn");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("JoborderId");

                    b.ToTable("InviteCandidate");
                });

            modelBuilder.Entity("WebApi.Models.JobCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AddedById");

                    b.Property<DateTime?>("AddedOn");

                    b.Property<int>("CandidateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("jobOrderId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("jobOrderId");

                    b.ToTable("JobCandidate");
                });

            modelBuilder.Entity("WebApi.Models.JobMCQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddedById");

                    b.Property<DateTime>("AddedOn");

                    b.Property<int>("JobOrderId");

                    b.Property<int?>("OrderById");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("JobMCQuestion");
                });

            modelBuilder.Entity("WebApi.Models.JobOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Batch1");

                    b.Property<DateTime?>("Batch2");

                    b.Property<DateTime?>("Batch3");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Experience");

                    b.Property<string>("InviteId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("JobTypeId");

                    b.Property<string>("Location");

                    b.Property<long?>("ManagerId");

                    b.Property<string>("Notes");

                    b.Property<int?>("Openings");

                    b.Property<DateTime?>("Published");

                    b.Property<string>("Skills");

                    b.Property<int?>("Status");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Updated");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("JobOrder");
                });

            modelBuilder.Entity("WebApi.Models.JobOrderDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentId");

                    b.Property<int>("JobOrderId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("JobOrderId");

                    b.ToTable("JobOrderDocuments");
                });

            modelBuilder.Entity("WebApi.Models.JobQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddedById");

                    b.Property<DateTime>("AddedOn");

                    b.Property<int>("JobOrderId");

                    b.Property<int?>("OrderById");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("JobOrderId");

                    b.HasIndex("QuestionId");

                    b.ToTable("JobQuestion");
                });

            modelBuilder.Entity("WebApi.Models.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JobStatus");
                });

            modelBuilder.Entity("WebApi.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Jobtype");
                });

            modelBuilder.Entity("WebApi.Models.PracticeCandidate", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<int>("QuestionId");

                    b.Property<int?>("Status");

                    b.Property<DateTime?>("UploadedOn");

                    b.Property<string>("VideoFile");

                    b.HasKey("Id");

                    b.ToTable("PracticeCandidate");
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BufferTime");

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<string>("QuestionTitle");

                    b.Property<int>("QuestionTypeId");

                    b.Property<DateTime?>("Updated");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("WebApi.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Description");

                    b.Property<string>("TypeName");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("WebApi.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebApi.Models.State", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("Countryid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("id");

                    b.HasIndex("Countryid");

                    b.ToTable("State");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Culture");

                    b.Property<int?>("DefaultAddressId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Photo");

                    b.Property<string>("RefreshTokenHash");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTimeOffset>("UpdatedOn");

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DefaultAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApi.Models.UserActivate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GuiId");

                    b.Property<string>("Token");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivate");
                });

            modelBuilder.Entity("WebApi.Models.UserAddress", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<int>("Addressid");

                    b.Property<DateTimeOffset?>("LastUsedOn");

                    b.HasKey("UserId");

                    b.HasIndex("Addressid");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("WebApi.Models.vwCandidateJob", b =>
                {
                    b.Property<int>("JobOrderId");

                    b.Property<int>("CandidateId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("AssessmentId");

                    b.Property<int?>("BufferTime");

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<int?>("Id");

                    b.Property<string>("Notes");

                    b.Property<int?>("OrderById");

                    b.Property<string>("QuestionTitle");

                    b.Property<int?>("Rating");

                    b.Property<int?>("Status");

                    b.Property<DateTime?>("UploadedOn");

                    b.Property<string>("Videofile");

                    b.HasKey("JobOrderId", "CandidateId", "QuestionId", "AssessmentId");

                    b.HasAlternateKey("AssessmentId", "CandidateId", "JobOrderId", "QuestionId");

                    b.ToTable("vwCandidateJob");
                });

            modelBuilder.Entity("WebApi.Models.vwPractice", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId");

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<int>("QuestionId");

                    b.Property<string>("QuestionTitle");

                    b.Property<int?>("Status");

                    b.Property<DateTime?>("UploadedOn");

                    b.Property<string>("VideoFile");

                    b.HasKey("Id");

                    b.ToTable("vwPractice");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("WebApi.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("WebApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.ActivityLog", b =>
                {
                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Address", b =>
                {
                    b.HasOne("WebApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("WebApi.Models.AssesmentCandidate", b =>
                {
                    b.HasOne("WebApi.Models.Assessment")
                        .WithMany("Responses")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Assessment", b =>
                {
                    b.HasOne("WebApi.Models.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("WebApi.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.JobOrder", "JobOrder")
                        .WithMany("Assessments")
                        .HasForeignKey("JobOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.AssessmentOnBoarding", "OnBoarding")
                        .WithMany()
                        .HasForeignKey("OnBoardingId");
                });

            modelBuilder.Entity("WebApi.Models.AssessmentDocument", b =>
                {
                    b.HasOne("WebApi.Models.Assessment")
                        .WithMany("Documents")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.AssessmentForm", b =>
                {
                    b.HasOne("WebApi.Models.Assessment")
                        .WithMany("Forms")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.AssessmentOnBoarding", b =>
                {
                    b.HasOne("WebApi.Models.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Candidate", b =>
                {
                    b.HasOne("WebApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Addressid");

                    b.HasOne("WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApi.Models.City", b =>
                {
                    b.HasOne("WebApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Company", b =>
                {
                    b.HasOne("WebApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("WebApi.Models.Event", b =>
                {
                    b.HasOne("WebApi.Models.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarId");

                    b.HasOne("WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("Companyid");
                });

            modelBuilder.Entity("WebApi.Models.EventUser", b =>
                {
                    b.HasOne("WebApi.Models.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.FormTemplate", b =>
                {
                    b.HasOne("WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.InviteCandidate", b =>
                {
                    b.HasOne("WebApi.Models.JobOrder", "JobOrder")
                        .WithMany()
                        .HasForeignKey("JoborderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.JobCandidate", b =>
                {
                    b.HasOne("WebApi.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.JobOrder", "JobOrder")
                        .WithMany("Candidates")
                        .HasForeignKey("jobOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.JobMCQuestion", b =>
                {
                    b.HasOne("WebApi.Models.FormTemplate", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.JobOrder", b =>
                {
                    b.HasOne("WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("WebApi.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId");

                    b.HasOne("WebApi.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApi.Models.JobOrderDocuments", b =>
                {
                    b.HasOne("WebApi.Models.DocumentTemplate", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.JobOrder", "JobOrder")
                        .WithMany("JobOrderDocuments")
                        .HasForeignKey("JobOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.JobQuestion", b =>
                {
                    b.HasOne("WebApi.Models.JobOrder")
                        .WithMany("Questions")
                        .HasForeignKey("JobOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.HasOne("WebApi.Models.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.State", b =>
                {
                    b.HasOne("WebApi.Models.Country", "Country")
                        .WithMany("StatesOrProvinces")
                        .HasForeignKey("Countryid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.HasOne("WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("WebApi.Models.Address", "DefaultAddress")
                        .WithMany()
                        .HasForeignKey("DefaultAddressId");
                });

            modelBuilder.Entity("WebApi.Models.UserActivate", b =>
                {
                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Models.UserAddress", b =>
                {
                    b.HasOne("WebApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Addressid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.HasOne("WebApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
